name: Deploy to DigitalOcean Droplet
on:
  push:
    branches: [ main ] 

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v4

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PW }}

      # - name: Build and tag image
      #   run: |
      #     IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/be-log-let:${{ github.sha }}
      #     docker build -t $IMAGE_NAME .
      
      # - name: Push to Docker Hub
      #   run: |
      #     IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/be-log-let:${{ github.sha }}
      #     docker push $IMAGE_NAME

      - name: Set output image
        id: meta
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/be-log-let:${{ github.sha }}
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "$IMAGE"
      - name: Set color
        id: color-selector
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
      - name: Get color
        env:
          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
        run: echo "The selected color is $SELECTED_COLOR"
        
  deploy:
    name: Deploy to Droplet
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: TEST
        run: |
          echo "${{ needs.build-and-push.outputs.image }}"
      # - name: SSH & Deploy
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{secrets.USERNAME}}
      #     key: ${{secrets.KEY}}
      #     script: |
      #       # pull latest
      #       docker pull ${{ needs.build-and-push.outputs.image }}
      #       # stop & remove old
      #       docker stop myapp  || true
      #       docker rm   myapp  || true
      #       # run new
      #       docker run -d \
      #         --name myapp \
      #         -p 80:3000 \
      #         ${{ needs.build-and-push.outputs.image }}
